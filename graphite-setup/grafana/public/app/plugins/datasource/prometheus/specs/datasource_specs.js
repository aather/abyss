/*! grafana - v2.5.0 - 2015-10-28
 * Copyright (c) 2015 Torkel Ã–degaard; Licensed Apache-2.0 */

define(["require","exports","test/specs/helpers","test/lib/common","moment","app/plugins/datasource/prometheus/datasource"],function(a,b,c,d,e){d.describe("PrometheusDatasource",function(){var a=new c.ServiceTestContext;d.beforeEach(d.angularMocks.module("grafana.services")),d.beforeEach(a.createService("PrometheusDatasource")),d.beforeEach(function(){a.ds=new a.service({url:"proxied",directUrl:"direct",user:"test",password:"mupp"})}),d.describe("When querying prometheus with one target using query editor target spec",function(){var b,c="proxied/api/v1/query_range?query="+encodeURIComponent('test{job="testjob"}')+"&start=1443438675&end=1443460275&step=60s",f={range:{from:e(1443438674760),to:e(1443460274760)},targets:[{expr:'test{job="testjob"}'}],interval:"60s"},g={status:"success",data:{resultType:"matrix",result:[{metric:{__name__:"test",job:"testjob"},values:[[1443454528,"3846"]]}]}};d.beforeEach(function(){a.$httpBackend.expect("GET",c).respond(g),a.ds.query(f).then(function(a){b=a}),a.$httpBackend.flush()}),d.it("should generate the correct query",function(){a.$httpBackend.verifyNoOutstandingExpectation()}),d.it("should return series list",function(){d.expect(b.data.length).to.be(1),d.expect(b.data[0].target).to.be('test{job="testjob"}')})}),d.describe("When performing metricFindQuery",function(){var b,c;d.it("label_values(resource) should generate label search query",function(){c={status:"success",data:["value1","value2","value3"]},a.$httpBackend.expect("GET","proxied/api/v1/label/resource/values").respond(c),a.ds.metricFindQuery("label_values(resource)").then(function(a){b=a}),a.$httpBackend.flush(),a.$rootScope.$apply(),d.expect(b.length).to.be(3)}),d.it("label_values(metric, resource) should generate series query",function(){c={status:"success",data:[{__name__:"metric",resource:"value1"},{__name__:"metric",resource:"value2"},{__name__:"metric",resource:"value3"}]},a.$httpBackend.expect("GET","proxied/api/v1/series?match[]=metric").respond(c),a.ds.metricFindQuery("label_values(metric, resource)").then(function(a){b=a}),a.$httpBackend.flush(),a.$rootScope.$apply(),d.expect(b.length).to.be(3)}),d.it("metrics(metric.*) should generate metric name query",function(){c={status:"success",data:["metric1","metric2","metric3","nomatch"]},a.$httpBackend.expect("GET","proxied/api/v1/label/__name__/values").respond(c),a.ds.metricFindQuery("metrics(metric.*)").then(function(a){b=a}),a.$httpBackend.flush(),a.$rootScope.$apply(),d.expect(b.length).to.be(3)})})})});