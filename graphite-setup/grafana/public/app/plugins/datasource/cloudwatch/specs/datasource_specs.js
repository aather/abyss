/*! grafana - v2.5.0 - 2015-10-28
 * Copyright (c) 2015 Torkel Ã–degaard; Licensed Apache-2.0 */

define(["require","exports","test/specs/helpers","test/lib/common","app/plugins/datasource/cloudwatch/datasource"],function(a,b,c,d){d.describe("CloudWatchDatasource",function(){function a(a,c){d.describe("metricFindQuery "+a,function(){var e={};e.setup=function(c){d.beforeEach(function(){c(),b.backendSrv.datasourceRequest=function(a){return e.request=a,b.$q.when({data:e.requestResponse})},b.ds.metricFindQuery(a).then(function(a){e.result=a}),b.$rootScope.$apply()})},c(e)})}var b=new c.ServiceTestContext;d.beforeEach(d.angularMocks.module("grafana.services")),d.beforeEach(d.angularMocks.module("grafana.controllers")),d.beforeEach(b.providePhase(["templateSrv","backendSrv"])),d.beforeEach(b.createService("CloudWatchDatasource")),d.beforeEach(function(){b.ds=new b.service({jsonData:{defaultRegion:"us-east-1",access:"proxy"}})}),d.describe("When performing CloudWatch query",function(){var a,c={range:{from:"now-1h",to:"now"},targets:[{region:"us-east-1",namespace:"AWS/EC2",metricName:"CPUUtilization",dimensions:{InstanceId:"i-12345678"},statistics:["Average"],period:300}]},e={Datapoints:[{Average:1,Timestamp:"Wed Dec 31 1969 16:00:00 GMT-0800 (PST)"}],Label:"CPUUtilization"};d.beforeEach(function(){b.backendSrv.datasourceRequest=function(c){return a=c,b.$q.when({data:e})}}),d.it("should generate the correct query",function(e){b.ds.query(c).then(function(){var b=a.data.parameters;d.expect(b.namespace).to.be(c.targets[0].namespace),d.expect(b.metricName).to.be(c.targets[0].metricName),d.expect(b.dimensions[0].Name).to.be(Object.keys(c.targets[0].dimensions)[0]),d.expect(b.dimensions[0].Value).to.be(c.targets[0].dimensions[Object.keys(c.targets[0].dimensions)[0]]),d.expect(b.statistics).to.eql(c.targets[0].statistics),d.expect(b.period).to.be(c.targets[0].period),e()}),b.$rootScope.$apply()}),d.it("should return series list",function(a){b.ds.query(c).then(function(b){d.expect(b.data[0].target).to.be("CPUUtilization_Average"),d.expect(b.data[0].datapoints[0][0]).to.be(e.Datapoints[0].Average),a()}),b.$rootScope.$apply()})}),a("regions()",function(a){a.setup(function(){a.requestResponse=[{text:"us-east-1"}]}),d.it("should call __GetRegions and return result",function(){d.expect(a.result[0].text).to.contain("us-east-1"),d.expect(a.request.data.action).to.be("__GetRegions")})}),a("namespaces()",function(a){a.setup(function(){a.requestResponse=[{text:"AWS/EC2"}]}),d.it("should call __GetNamespaces and return result",function(){d.expect(a.result[0].text).to.contain("AWS/EC2"),d.expect(a.request.data.action).to.be("__GetNamespaces")})}),a("metrics(AWS/EC2)",function(a){a.setup(function(){a.requestResponse=[{text:"CPUUtilization"}]}),d.it("should call __GetMetrics and return result",function(){d.expect(a.result[0].text).to.be("CPUUtilization"),d.expect(a.request.data.action).to.be("__GetMetrics")})}),a("dimension_keys(AWS/EC2)",function(a){a.setup(function(){a.requestResponse=[{text:"InstanceId"}]}),d.it("should call __GetDimensions and return result",function(){d.expect(a.result[0].text).to.be("InstanceId"),d.expect(a.request.data.action).to.be("__GetDimensions")})}),a("dimension_values(us-east-1,AWS/EC2,CPUUtilization)",function(a){a.setup(function(){a.requestResponse={Metrics:[{Namespace:"AWS/EC2",MetricName:"CPUUtilization",Dimensions:[{Name:"InstanceId",Value:"i-12345678"}]}]}}),d.it("should call __ListMetrics and return result",function(){d.expect(a.result[0].text).to.be("i-12345678"),d.expect(a.request.data.action).to.be("ListMetrics")})})})});