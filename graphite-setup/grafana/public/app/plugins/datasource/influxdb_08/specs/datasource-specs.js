/*! grafana - v2.5.0 - 2015-10-28
 * Copyright (c) 2015 Torkel Ã–degaard; Licensed Apache-2.0 */

define(["require","exports","test/specs/helpers","test/lib/common","app/plugins/datasource/influxdb_08/datasource","app/services/backendSrv","app/services/alertSrv"],function(a,b,c,d){d.describe("InfluxDatasource",function(){var a=new c.ServiceTestContext;d.beforeEach(d.angularMocks.module("grafana.services")),d.beforeEach(a.providePhase(["templateSrv"])),d.beforeEach(a.createService("InfluxDatasource_08")),d.beforeEach(function(){a.ds=new a.service({url:"",user:"test",password:"mupp"})}),d.describe("When querying influxdb with one target using query editor target spec",function(){var b,c="/series?p=mupp&q=select+mean(value)+from+%22test%22+where+time+%3E+now()-1h+group+by+time(1s)+order+asc",e={rangeRaw:{from:"now-1h",to:"now"},targets:[{series:"test",column:"value","function":"mean"}],interval:"1s"},f=[{columns:["time","sequence_nr","value"],name:"test",points:[[10,1,1]]}];d.beforeEach(function(){a.$httpBackend.expect("GET",c).respond(f),a.ds.query(e).then(function(a){b=a}),a.$httpBackend.flush()}),d.it("should generate the correct query",function(){a.$httpBackend.verifyNoOutstandingExpectation()}),d.it("should return series list",function(){d.expect(b.data.length).to.be(1),d.expect(b.data[0].target).to.be("test.value")})}),d.describe("When querying influxdb with one raw query",function(){var b,c="/series?p=mupp&q=select+value+from+series+where+time+%3E+now()-1h",e={rangeRaw:{from:"now-1h",to:"now"},targets:[{query:"select value from series where $timeFilter",rawQuery:!0}]},f=[];d.beforeEach(function(){a.$httpBackend.expect("GET",c).respond(f),a.ds.query(e).then(function(a){b=a}),a.$httpBackend.flush()}),d.it("should generate the correct query",function(){a.$httpBackend.verifyNoOutstandingExpectation()})}),d.describe("When issuing annotation query",function(){var b,c="/series?p=mupp&q=select+title+from+events.backend_01+where+time+%3E+now()-1h",e={from:"now-1h",to:"now"},f={query:"select title from events.$server where $timeFilter"},g=[];d.beforeEach(function(){a.templateSrv.replace=function(a){return a.replace("$server","backend_01")},a.$httpBackend.expect("GET",c).respond(g),a.ds.annotationQuery(f,e).then(function(a){b=a}),a.$httpBackend.flush()}),d.it("should generate the correct query",function(){a.$httpBackend.verifyNoOutstandingExpectation()})})})});