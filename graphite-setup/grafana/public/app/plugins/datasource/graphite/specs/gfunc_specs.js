/*! grafana - v2.5.0 - 2015-10-28
 * Copyright (c) 2015 Torkel Ã–degaard; Licensed Apache-2.0 */

define(["require","exports","app/plugins/datasource/graphite/gfunc","test/lib/common"],function(a,b,c,d){d.describe("when creating func instance from func names",function(){d.it("should return func instance",function(){var a=c.createFuncInstance("sumSeries");d.expect(a).to.be.ok(),d.expect(a.def.name).to.equal("sumSeries"),d.expect(a.def.params.length).to.equal(5),d.expect(a.def.defaultParams.length).to.equal(1)}),d.it("should return func instance with shortName",function(){var a=c.createFuncInstance("sum");d.expect(a).to.be.ok()}),d.it("should return func instance from funcDef",function(){var a=c.createFuncInstance("sum"),b=c.createFuncInstance(a.def);d.expect(b).to.be.ok()}),d.it("func instance should have text representation",function(){var a=c.createFuncInstance("groupByNode");a.params[0]=5,a.params[1]="avg",a.updateText(),d.expect(a.text).to.equal("groupByNode(5, avg)")})}),d.describe("when rendering func instance",function(){d.it("should handle single metric param",function(){var a=c.createFuncInstance("sumSeries");d.expect(a.render("hello.metric")).to.equal("sumSeries(hello.metric)")}),d.it("should include default params if options enable it",function(){var a=c.createFuncInstance("scaleToSeconds",{withDefaultParams:!0});d.expect(a.render("hello")).to.equal("scaleToSeconds(hello, 1)")}),d.it("should handle int or interval params with number",function(){var a=c.createFuncInstance("movingMedian");a.params[0]="5",d.expect(a.render("hello")).to.equal("movingMedian(hello, 5)")}),d.it("should handle int or interval params with interval string",function(){var a=c.createFuncInstance("movingMedian");a.params[0]="5min",d.expect(a.render("hello")).to.equal("movingMedian(hello, '5min')")}),d.it("should handle metric param and int param and string param",function(){var a=c.createFuncInstance("groupByNode");a.params[0]=5,a.params[1]="avg",d.expect(a.render("hello.metric")).to.equal("groupByNode(hello.metric, 5, 'avg')")}),d.it("should handle function with no metric param",function(){var a=c.createFuncInstance("randomWalk");a.params[0]="test",d.expect(a.render(void 0)).to.equal("randomWalk('test')")}),d.it("should handle function multiple series params",function(){var a=c.createFuncInstance("asPercent");a.params[0]="#B",d.expect(a.render("#A")).to.equal("asPercent(#A, #B)")})}),d.describe("when requesting function categories",function(){d.it("should return function categories",function(){var a=c.getCategories();d.expect(a.Special.length).to.be.greaterThan(8)})}),d.describe("when updating func param",function(){d.it("should update param value and update text representation",function(){var a=c.createFuncInstance("summarize",{withDefaultParams:!0});a.updateParam("1h",0),d.expect(a.params[0]).to.be("1h"),d.expect(a.text).to.be("summarize(1h, sum, false)")}),d.it("should parse numbers as float",function(){var a=c.createFuncInstance("scale");a.updateParam("0.001",0),d.expect(a.params[0]).to.be("0.001")})}),d.describe("when updating func param with optional second parameter",function(){d.it("should update value and text",function(){var a=c.createFuncInstance("aliasByNode");a.updateParam("1",0),d.expect(a.params[0]).to.be("1")}),d.it("should slit text and put value in second param",function(){var a=c.createFuncInstance("aliasByNode");a.updateParam("4,-5",0),d.expect(a.params[0]).to.be("4"),d.expect(a.params[1]).to.be("-5"),d.expect(a.text).to.be("aliasByNode(4, -5)")}),d.it("should remove second param when empty string is set",function(){var a=c.createFuncInstance("aliasByNode");a.updateParam("4,-5",0),a.updateParam("",1),d.expect(a.params[0]).to.be("4"),d.expect(a.params[1]).to.be(void 0),d.expect(a.text).to.be("aliasByNode(4)")})})});